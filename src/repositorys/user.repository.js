// Importando o Prisma
import { prisma } from "../services/prisma.js";

// Criando uma fun√ß√£o para criar um usu√°rio
export const createUser = async (data) => {
  try {
    // Aqui, estamos pedindo ao Prisma para criar um novo usu√°rio com os dados fornecidos
    const user = await prisma.user.create({
      data,
      select: {
        id: true,
        name: true,
        email: true,
        password: false,
        phone: true,
        createAt: true,
        updateAt: true,
      },
    });
    // Depois que o usu√°rio √© criado, retornamos essa informa√ß√£o
    return user;
  } catch (error) {
    // Tratamento de erro
    throw new Error("Erro ao criar usu√°rio: " + error.message);
  }
};

// Criando uma fun√ß√£o para buscar todos os usu√°rios
export const getAll = async () => {
  try {
    // Aqui, estamos chamando a fun√ß√£o getAll
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        password: false,
        phone: true,
        createAt: true,
        updateAt: true,
      },
    });
    // Depois que os usu√°rios forem buscados, retornamos essa informa√ß√£o
    return users;
  } catch (error) {
    // Tratamento de erro
    throw new Error("Erro ao buscar usu√°rios: " + error.message);
  }
};

// Criando uma fun√ß√£o para buscar um usu√°rio pelo ID
export const getById = async (id) => {
  try {
    // Aqui, estamos chamando a fun√ß√£o findUnique do Prisma
    const user = await prisma.user.findUnique({
      // Aqui, estamos buscando o usu√°rio pelo ID
      where: {
        id
      }
    });
    // Retornando o usu√°rio encontrado
    return user;
  } catch (error) {
    // Tratamento de erro
    throw new Error("Erro ao buscar usu√°rio: " + error.message);
  }
};

// Criando uma rota para atualizar um usu√°rio
export const updateUser = async (id, data) => {
  try {
    // Aqui, estamos pedindo ao Prisma para atualizar um usu√°rio com o ID fornecido
    const user = await prisma.user.update({
      // Especificamos o usu√°rio a ser atualizado pelo ID
      where: {
        id
      },
      // Dados a serem atualizados
      data,
      // Selecionamos os campos que queremos retornar
      select: {
        id: true,
        name: true,
        email: true,
        password: false,
        phone: true,
        createAt: true,
        updateAt: true,
      }
    });
    // Depois que o usu√°rio √© atualizado, retornamos essa informa√ß√£o
    return user;
  } catch (error) {
    // Tratamento de erro
    throw new Error("Erro ao atualizar usu√°rio: " + error.message);
  }
};

// Criando uma fun√ß√£o para deletar um usu√°rio
export const deleteUser = async (id) => {
  try {
    // Aqui, estamos pedindo ao Prisma para deletar um usu√°rio com o ID fornecido
    await prisma.user.delete({
      where: {
        id
      }
    });
    return;
  } catch (error) {
    // Tratamento de erro
    throw new Error("Erro ao deletar usu√°rio: " + error.message);
  }
};

/*
Importando o Prisma:
import { Prisma } from "../services/prisma.js";: Isso √© como pegar uma caixa de ferramentas chamada ‚ÄúPrisma‚Äù que algu√©m j√° preparou para n√≥s. Essa caixa cont√©m todas as ferramentas que precisamos para trabalhar com nosso banco de dados.

Criando uma fun√ß√£o para criar um usu√°rio:
export const createUser = async (data) => {: Imagine que estamos criando um formul√°rio para adicionar informa√ß√µes sobre um novo morador √† nossa casa (ou aplicativo). Essa fun√ß√£o chamada createUser √© como o nosso ‚Äúformul√°rio de cria√ß√£o de usu√°rio‚Äù.

async: Isso significa que a fun√ß√£o pode levar algum tempo para fazer seu trabalho (como quando voc√™ est√° cozinhando algo no forno e precisa esperar).

(data): Aqui, data √© como o papel onde escrevemos as informa√ß√µes do novo morador. Ele cont√©m coisas como nome, idade, endere√ßo, etc.

Pedindo ao Prisma para criar um novo usu√°rio:
const user = await prisma.user.create({ data });: Agora estamos preenchendo o formul√°rio! Pedimos ao Prisma para criar um novo usu√°rio com as informa√ß√µes que est√£o no data.

await: Isso √© como esperar pacientemente enquanto o Prisma preenche o formul√°rio e coloca os detalhes do novo morador em um arquivo especial.

user: Quando o Prisma termina, ele nos entrega um cart√£o com o nome do novo morador (ou seja, o objeto user).

Retornando o usu√°rio criado:
return user;: Finalmente, pegamos o cart√£o com o nome do novo morador e o mostramos para todos! Essa linha √© como dizer: ‚ÄúOlhem, temos um novo usu√°rio!‚Äù
E assim, nosso ‚Äúmestre de obras‚Äù Prisma cuida de todo o processo de criar um usu√°rio no nosso banco de dados. üè†‚ú®
*/ 